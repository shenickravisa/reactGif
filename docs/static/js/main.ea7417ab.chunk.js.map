{"version":3,"sources":["components/AddCategory.jsx","helpers/getGif.js","config.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","App.jsx","index.js"],"names":["AddCategory","addInputValue","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","value","onChange","target","type","getGif","categories","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","urlCopy","React","createRef","onClick","textArea","document","createElement","current","textContent","body","appendChild","select","execCommand","remove","copyUrl","className","src","alt","ref","GifGrid","category","loading","state","setState","useEffect","getGifService","console","log","useFetchGifs","open","setOpen","handleClose","index","key","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","message","action","Fragment","Button","color","size","IconButton","aria-label","fontSize","App","setCategories","ReactDOM","render","getElementById"],"mappings":"8RAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAchD,OACE,6BACE,0BAAMC,SAXW,SAACC,GACpBA,EAAEC,iBACIJ,EAAWK,OAAOC,OAAS,IAGjCR,EAAcE,GACdC,EAAc,OAMV,2BAAOM,MAAOP,EAAYQ,SAfP,SAACL,GACxBF,EAAcE,EAAEM,OAAOF,QAcmCG,KAAK,Y,yBCjBpDC,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACkCC,UAAUH,GAD5C,6BCFJ,oCDEI,SAEFI,MAAMF,GAFJ,cAEdG,EAFc,gBAGGA,EAAIC,OAHP,uBAGZC,EAHY,EAGZA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,IAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,iBAAE,EAAYC,wBAAd,aAAE,EAA8BZ,QARnB,kBAWbM,GAXa,4CAAH,sDE0BNO,G,MAzBK,SAAC,GAAwB,IAAtBH,EAAqB,EAArBA,MAAOV,EAAc,EAAdA,IACtBc,GADoC,EAATL,GACjBM,IAAMC,aAUtB,OACE,yBACEC,QAAS,YAXG,WACd,IAAIC,EAAWC,SAASC,cAAc,YACtCF,EAASzB,MAAQqB,EAAQO,QAAQC,YACjCH,SAASI,KAAKC,YAAYN,GAC1BA,EAASO,SACTN,SAASO,YAAY,QACrBR,EAASS,SAMLC,IAEFC,UAAU,4CAEV,yBAAKC,IAAK9B,EAAK+B,IAAKrB,IACpB,2BAAIA,GACJ,uBAAGsB,IAAKlB,GAAUd,M,yCCdXiC,EAAU,SAAC,GAAoB,IAAlBnC,EAAiB,EAAjBA,WAAiB,ECJf,SAACoC,GAAc,IAAD,EAEZjD,mBAAS,CAC/BoB,KAAM,GACN8B,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAOtCC,qBAAU,WACNC,EAAcL,KACf,CAACA,IAKJ,IAAMK,EAAa,uCAAG,WAAOL,GAAP,eAAAnC,EAAA,+EAEEF,EAAOqC,GAFT,OAEV/B,EAFU,OAGdkC,EAAS,CACLhC,KAAMF,EACNgC,SAAS,IALC,gDAQdK,QAAQC,IAAR,MARc,yDAAH,sDAanB,OAAOL,EDpBiBM,CAAa5C,GAA/BO,EAHiC,EAGjCA,KAAM8B,EAH2B,EAG3BA,QAH2B,EAMjBlD,oBAAS,GANQ,mBAMlC0D,EANkC,KAM5BC,EAN4B,KAYnCC,EAAc,WAClBD,GAAQ,IAGV,OACE,6BACE,4BAAK9C,GACJqC,GACC,uBAAGN,UAAU,uCAAb,iBAEF,yBACEZ,QAAS,WAdb2B,GAAQ,IAiBJf,UAAU,aAETxB,EAAKE,KAAI,SAACC,EAAKsC,GACd,OAAO,kBAAC,EAAD,eAAaC,IAAKD,GAAWtC,SAGtCH,EAAKb,QAAU,2DACjB,kBAACwD,EAAA,EAAD,CACEC,aAAc,CACZC,SAAU,SACVC,WAAY,UAEdR,KAAMA,EACNS,iBAAkB,IAClBC,QAASR,EACTS,QAAQ,2BACRC,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,YAAYC,KAAK,QAAQ1C,QAAS4B,GAAhD,UAGA,kBAACe,EAAA,EAAD,CACED,KAAK,QACLE,aAAW,QACXH,MAAM,UACNzC,QAAS4B,GAET,kBAAC,IAAD,CAAWiB,SAAS,gB,MEpCnBC,MArBf,WAAgB,IAAD,EACuB9E,mBAAS,IADhC,mBACNa,EADM,KACMkE,EADN,KAMb,OACE,6BACE,4CACA,6BACA,kBAAC,EAAD,CAAahF,cARM,SAACS,GACtBuE,EAAc,CAACvE,GAAF,mBAAYK,QAQvB,6BACGA,EAAWS,KAAI,SAAC2B,EAAUY,GACzB,OAAO,kBAAC,EAAD,CAASC,IAAKD,EAAOhD,WAAYoC,SAG1CpC,EAAWN,QAAU,8DChB7ByE,IAASC,OAAO,kBAAC,EAAD,MAAS/C,SAASgD,eAAe,W","file":"static/js/main.ea7417ab.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport const AddCategory = ({ addInputValue }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const handleInputValue = (e) => {\n    setInputValue(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!(inputValue.trim().length > 2)) {\n      return;\n    }\n    addInputValue(inputValue);\n    setInputValue(\"\");\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input value={inputValue} onChange={handleInputValue} type=\"text\" />\n      </form>\n    </div>\n  );\n};\n","import apiGiphyKey from \"../config.js\";\n  //peticion HTTP\n  export const getGif = async (categories) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categories)}&limit=10&api_key=${apiGiphyKey}`;\n    const res = await fetch(url);\n    const { data } = await res.json();\n    const gifs = data.map((img) => {\n      return {\n        id: img.id,\n        title: img.title,\n        url: img.images?.downsized_medium?.url,\n      };\n    });\n    return gifs\n  };","const apiGiphyKey = 'HlONrQzplpcQOhIIQU4ZEf5heQ8BScWc'\n\nexport default apiGiphyKey","import React from \"react\";\nimport \"../stylesComponents/gifgrid.scss\";\n\nconst GifGridItem = ({ title, url, id }) => {\n  const urlCopy = React.createRef();\n  const copyUrl = () => {\n    var textArea = document.createElement(\"textarea\");\n    textArea.value = urlCopy.current.textContent;\n    document.body.appendChild(textArea);\n    textArea.select();\n    document.execCommand(\"Copy\");\n    textArea.remove();\n  };\n\n  return (\n    <div\n      onClick={() => {\n        copyUrl();\n      }}\n      className=\"card animate__animated animate__fadeInUp\"\n    >\n      <img src={url} alt={title} />\n      <p>{title}</p>\n      <p ref={urlCopy}>{url}</p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport GifGridItem from \"./GifGridItem.jsx\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Button from \"@material-ui/core/Button\";\n\nexport const GifGrid = ({ categories }) => {\n  // const [images, setImage] = useState([]);\n\n  const { data, loading } = useFetchGifs(categories);\n  //{data:images}\n  //significa que crea una copia renombra de data por images\n  const [open, setOpen] = useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <h3>{categories}</h3>\n      {loading && (\n        <p className=\"animate__animated animate__flipOutY\">'Cargando...'</p>\n      )}\n      <div\n        onClick={() => {\n          handleClick();\n        }}\n        className=\"card-grid\"\n      >\n        {data.map((img, index) => {\n          return <GifGridItem key={index} {...img} />;\n        })}\n      </div>\n      {!data.length && <h1>No hay imagenes que mostrar</h1>}\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n        open={open}\n        autoHideDuration={3000}\n        onClose={handleClose}\n        message=\"Copiado al porta papeles\"\n        action={\n          <React.Fragment>\n            <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\n              cerrar\n            </Button>\n            <IconButton\n              size=\"small\"\n              aria-label=\"close\"\n              color=\"inherit\"\n              onClick={handleClose}\n            >\n              <CloseIcon fontSize=\"small\" />\n            </IconButton>\n          </React.Fragment>\n        }\n      />\n    </div>\n  );\n};\n\nGifGrid.propTypes = {\n  categories: PropTypes.string,\n};\n","//use al inicio significa que es un hook los hooks no son mas que funciones\n\nimport { useState, useEffect } from \"react\"\nimport { getGif } from \"../helpers/getGif.js\";\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect(() => {\n        getGifService(category)\n    }, [category])\n    //mounted solo se ejecuta una sola vez cuando el componente se monta\n    //categories como dependencia significa que el codigo se estara ejecutando n cantidad de veces mientras cambie de estado la prop\n    //los use effects no pueden ser async\n\n    const getGifService = async (category) => {\n        try {\n            let res = await getGif(category);\n            setState({\n                data: res,\n                loading: false\n            });\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n\n    return state //{data:[], loading: true}\n}","import React, { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory.jsx\";\nimport { GifGrid } from \"./components/GifGrid.jsx\";\nimport \"./App.scss\";\n\nfunction App() {\n  const [categories, setCategories] = useState([]);\n  const addNewCategory = (value) => {\n    setCategories([value, ...categories]);\n  };\n\n  return (\n    <div>\n      <h1>GifExpertApp</h1>\n      <hr />\n      <AddCategory addInputValue={addNewCategory} />\n      <div>\n        {categories.map((category, index) => {\n          return <GifGrid key={index} categories={category} />;\n        })}\n      </div>\n      {!categories.length && <div>Aún no hay categorías</div>}\n    </div>\n  );\n}\n\nexport default App;\n\n/**\n * usando un map espera un key que debe ser unica hace que retorne un valor de objetos el key sirve para\n * que react sepa cual se esta iterando\n * cuando se agregan nuevos elementos a un arreglo usando hooks no podemos usar .push() tenemos que crear una copia de ese arreglo y\n * agregarle nuevo valor\n *\n * enviar data del componente hijo al componente padre\n *\n */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App.jsx'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}